%locations
%error-verbose
%{
    /*************************************************************
    parser.ypp
    YACC FILE
    Date: 2021/10/18
    Haobin Chen (@Aoyamahiroki) <etyyuiope@gmail.com>
    Jiawei Xu   (@Darren-8)

    Main tokenizer
    **************************************************************/
    #include <llvm/Support/raw_ostream.h>

    #include <common/types.hh>
    #include <runtime/runtime.hh>
    #include <nodes/item_all.hh>
    #include <parser/parser.hh>

    #include <iostream>
    #include <fstream>
    #include <string>
    #include <stdexcept>

    //extern compiler::Symbol_table symbol_table;
    extern uint32_t yylineno;
    extern int yydebug;

    extern std::unique_ptr<compiler::CompilerRuntime> compiler_runtime;

    extern int yylex(void);
    extern int yyget_lineno(void);
    extern int yylex_destroy(void);

    #ifdef YYDEBUG
    #undef YYDEBUG
    #endif
    #define YYDEBUG 1
    # define YYLLOC_DEFAULT(Cur, Rhs, N)                          \
    do {                                                          \
        if (N) {                                                  \
            (Cur).first_line   = YYRHSLOC(Rhs, 1).first_line;     \
            (Cur).first_column = YYRHSLOC(Rhs, 1).first_column;   \
            (Cur).last_line    = YYRHSLOC(Rhs, N).last_line;      \
            (Cur).last_column  = YYRHSLOC(Rhs, N).last_column;    \
        } else {                                                  \
            (Cur).first_line   = (Cur).last_line   =              \
                YYRHSLOC(Rhs, 0).last_line;                       \
            (Cur).first_column = (Cur).last_column =              \
                YYRHSLOC(Rhs, 0).last_column;                     \
        }                                                         \
    } while (0)

    void yyerror(const char* str)
    {
        llvm::errs() << "\033[1;31;490m" << yylloc.first_line << ':'
                     << yylloc.first_column << " : [ERROR]: " << str << "\033[0m\n";
        yylex_destroy();
    }

    extern FILE* yyin;
%}

%union {
    compiler::basic_type                btype;
    compiler::Item_root*                item_root;               // root
    compiler::Item_decl*                item_decl;
    compiler::Item_stmt*                item_stmt;
    compiler::Item_stmt_decl*           item_stmt_decl;
    compiler::Item_func_def*            item_func_def;
    compiler::Item_expr*                item_expr;
    compiler::Item_expr_comma*          item_expr_comma;
    compiler::Item_ident*               item_ident;
    compiler::Item_ident_array*         item_ident_array;
    compiler::Item_decl_array_init*     item_decl_array_init;
    compiler::Item_literal*             item_literal;
    compiler::Item_literal_array_init*  item_literal_array_init;
    compiler::Item_decl_var*            item_decl_var;
    compiler::Item_decl_var_init*       item_decl_var_init;
    compiler::Item_func_def_list*       item_func_def_list;
    compiler::Item_func_def_arg*        item_func_def_arg;
    compiler::Item_func_call_list*      item_func_call_list;
    compiler::Item_block*               item_block;
    std::string*                        raw_string;
    char                                raw_char;
}

%token          IDENTIFIER 
// Operators 
%token          ADD MINUS MUL DIV MOD INC DEC
%token          EQUAL NEQ GEQ LEQ GT LTT
%token          BIT_AND BIT_OR BIT_XOR BIT_NEG
%token          LOGIC_AND LOGIC_OR LOGIC_NOT
// Numbers and string
%token          DECIMAL OCTAL HEX STRING
// Types
%token          INT DOUBLE FLOAT CHAR VOID
// Keywords
%token          IF ELSE DO WHILE FOR RETURN BREAK CONTINUE CONST ASSIGN TRUE FALSE
// Other symbols
%token          LBRACE RBRACE LPARENTHESIS RPARENTHESIS LSQUARE RSQUARE
%token          SEMICOLON DOT COMMA

// Priority.
%left  COMMA
%right ASSIGN
%left  LOGIC_OR
%left  LOGIC_AND
%left  BIT_OR
%left  BIT_XOR
%left  BIT_AND
%left  NEQ EQUAL
%left  LTT LEQ GT GEQ
%left  ADD MINUS
%left  MUL DIV MOD
%right LOGIC_NOT

// Type definition
%type <btype> BType
%type <item_block> BLOCK BlockItems
%type <item_root> CompUnit
%type <item_stmt> BlockItem Stmt ExpStmt AssignStmt Assignment eIfStmt ReturnStmt WhileStmt ForStmt BreakStmt ContinueStmt
%type <item_stmt_decl> Decl ConstDecl VarDecl  ConstDeclStmt VarDeclStmt 
%type <item_func_def> FuncDef
%type <item_func_def_list> FuncDefList
%type <item_func_def_arg> FuncParam FuncParamNormal FuncParamArray
%type <item_decl> VarDef VarDefNormal VarDefArray ConstDef ConstDefNormal ConstDefArray 
%type <item_expr> Exp AddExp MulExp BitExp LOrExp LAndExp EqExp RelExp BitAndExp BitOrExp BitXorExp UnaryExp PrimaryExp FunctionCall
%type <item_expr_comma> CommaExp
%type <item_ident> Ident LVal
%type <item_ident_array> ArrayID ArrayItem
%type <item_func_call_list> FunctionRParams
%type <item_literal_array_init> ArrayInitVal ArrayInitValHelper
%type <item_literal> LITERAL
%type <raw_string> IDENTIFIER STRING DECIMAL HEX OCTAL
%type <raw_char> CHAR

%start CompUnit
%%

CompUnit: CompUnit Decl         { $$->add_child($<item_decl>2); }
        | CompUnit FuncDef      { $$->add_child($<item_func_def>2); }
        | Decl                  { $$ = new compiler::Item_root(yyget_lineno()); compiler_runtime->setRoot($$); $$->add_child($<item_decl>1); }
        | FuncDef               { $$ = new compiler::Item_root(yyget_lineno()); compiler_runtime->setRoot($$); $$->add_child($<item_func_def>1); }
        ;

Decl: VarDeclStmt
    | ConstDeclStmt
    ;



VarDeclStmt: VarDecl SEMICOLON { $$ = $1; }
           ;

ConstDeclStmt: ConstDecl SEMICOLON { $$ = $1; }
             ;

BType: INT                      { $$ = compiler::basic_type::INT_TYPE; }
     | DOUBLE                   { $$ = compiler::basic_type::REAL_TYPE; }
     | FLOAT                    { $$ = compiler::basic_type::REAL_TYPE; }
     | CHAR                     { $$ = compiler::basic_type::CHAR_TYPE; }
     | STRING                   { $$ = compiler::basic_type::STR_TYPE; }
     ;

VarDecl: BType VarDef               { $$ = new compiler::Item_stmt_decl(yyget_lineno(), $1); $$->add_declaration($2); }
       | VarDecl COMMA VarDef       { $$->add_declaration($3); }
       ;

ConstDecl: CONST BType ConstDef      { $$ = new compiler::Item_stmt_decl(yyget_lineno(), $2); $$->add_declaration($3); }
         | ConstDecl COMMA ConstDef  { $$->add_declaration($3); }
         | BType CONST ConstDef      { $$ = new compiler::Item_stmt_decl(yyget_lineno(), $1); $$->add_declaration($3); }
         ;

VarDef: VarDefNormal
      | VarDefArray
      ;

VarDefNormal: Ident ASSIGN LOrExp             { $$ = new compiler::Item_decl_var_init(yyget_lineno(), $1, $3, false); }
            | Ident                        { $$ = new compiler::Item_decl_var(yyget_lineno(), $1); }
       
VarDefArray: ArrayID ASSIGN ArrayInitVal    { $$ = new compiler::Item_decl_array_init(yyget_lineno(), $1, $3, false); }
           | ArrayID                        { $$ = new compiler::Item_decl_array(yyget_lineno(), $1); }
           ;

ArrayID: ArrayID LSQUARE Exp RSQUARE        { $$ = $1; $$->add_shape($3); }
       | Ident LSQUARE Exp RSQUARE          { $$ = new compiler::Item_ident_array(yyget_lineno(), $1->get_name()); $$->add_shape($3); }
       | Ident LSQUARE RSQUARE              { $$ = new compiler::Item_ident_array(yyget_lineno(), $1->get_name()); $$->add_shape(nullptr); }
       | ArrayID LSQUARE RSQUARE            { $$ = $1; $$->add_shape(nullptr); }
       ;

ArrayInitVal: LBRACE ArrayInitValHelper RBRACE             { $$ = $2; }
            | LBRACE RBRACE                                { $$ = new compiler::Item_literal_array_init(yyget_lineno(), nullptr, false); }
            ;

ConstDef: ConstDefNormal                
        | ConstDefArray
        ;

ConstDefNormal: Ident ASSIGN LOrExp           { $$ = new compiler::Item_decl_var_init(yyget_lineno(), $1, $3, true); }
        ;

ConstDefArray: ArrayID ASSIGN ArrayInitVal      { $$ = new compiler::Item_decl_array_init(yyget_lineno(), $1, $3, true); }
             ;

FuncDef: BType Ident LPARENTHESIS FuncDefList RPARENTHESIS BLOCK    { $$ = new compiler::Item_func_def(yyget_lineno(), $1, $2, $4, $6); }
       | VOID  Ident LPARENTHESIS FuncDefList RPARENTHESIS BLOCK    { $$ = new compiler::Item_func_def(yyget_lineno(), compiler::basic_type::VOID_TYPE, $2, $4, $6); }
       | BType Ident LPARENTHESIS RPARENTHESIS BLOCK                { $$ = new compiler::Item_func_def(yyget_lineno(), $1, $2, new compiler::Item_func_def_list(yyget_lineno()), $5); }
       | VOID  Ident LPARENTHESIS RPARENTHESIS BLOCK                { $$ = new compiler::Item_func_def(yyget_lineno(), compiler::basic_type::VOID_TYPE, $2, new compiler::Item_func_def_list(yyget_lineno()), $5); }
       ;

FuncDefList: FuncDefList COMMA FuncParam        { $$->add_arg($3); }
           | FuncParam                          { $$ = new compiler::Item_func_def_list(yyget_lineno()); $$->add_arg($1); }
           ;

FuncParam: FuncParamNormal
         | FuncParamArray
         ;

FuncParamNormal: BType Ident       { $$ = new compiler::Item_func_def_arg(yyget_lineno(), $1, $2); }
               | CONST BType Ident { $$ = new compiler::Item_func_def_arg(yyget_lineno(), $2, $3); }
               ;

FuncParamArray: BType Ident LSQUARE RSQUARE                {
                                                            compiler::Item_ident_array* ident = new compiler::Item_ident_array(yyget_lineno(), $2->get_name());
                                                            ident->add_shape(new compiler::Item_literal_int(yyget_lineno(), 1));
                                                            $$ = new compiler::Item_func_def_arg(yyget_lineno(), $1, ident);
                                                        }
              | BType Ident LSQUARE Exp RSQUARE                {
                                                            compiler::Item_ident_array* ident = new compiler::Item_ident_array(yyget_lineno(), $2->get_name());
                                                            ident->add_shape($4);
                                                            $$ = new compiler::Item_func_def_arg(yyget_lineno(), $1, ident);
                                                        }
              | FuncParamArray LSQUARE RSQUARE          { $$ = $1; static_cast<compiler::Item_ident_array*>($$->get_identifier())->add_shape(new compiler::Item_literal_int(yyget_lineno(), 1)); }
              | FuncParamArray LSQUARE Exp RSQUARE          { $$ = $1; static_cast<compiler::Item_ident_array*>($$->get_identifier())->add_shape($3); }
              ;

Ident: IDENTIFIER       { $$ = new compiler::Item_ident(yyget_lineno(), *$1); }
     ;

ArrayInitValHelper: ArrayInitValHelper COMMA ArrayInitVal     { $$ = $1; $$->add_value($3); }
                  | ArrayInitValHelper COMMA LOrExp              {
                                                                $$ = $1;
                                                                compiler::Item_literal_array_init* const array_init = new compiler::Item_literal_array_init(yyget_lineno(), $3, true);
                                                                $$->add_value(array_init);
                                                              }
                  | ArrayInitVal                              { $$ = new compiler::Item_literal_array_init(yyget_lineno(), nullptr, false); $$->add_value($1); }
                  | LOrExp                                    {
                                                                $$ = new compiler::Item_literal_array_init(yyget_lineno(), nullptr, false);
                                                                compiler::Item_literal_array_init* const array_init = new compiler::Item_literal_array_init(yyget_lineno(), $1, true);
                                                                $$->add_value(array_init); 
                                                              }
                  | LOrExp COMMA ArrayInitVal                 {
                                                                $$ = new compiler::Item_literal_array_init(yyget_lineno(), nullptr, false);
                                                                compiler::Item_literal_array_init* const array_init = new compiler::Item_literal_array_init(yyget_lineno(), $1, true);
                                                                $$->add_value(array_init);
                                                                $$->add_value($3);
                                                              }
                  | CommaExp                                  
                  { 
                    $$ = new compiler::Item_literal_array_init(yyget_lineno(), nullptr, false);
                    for (auto expr : $1->get_expressions()) {
                        $$->add_value(new compiler::Item_literal_array_init(yyget_lineno(), expr, true));
                    }
                    delete $1;                                                
                  }
                  | CommaExp COMMA ArrayInitVal               
                  {
                    $$ = new compiler::Item_literal_array_init(yyget_lineno(), nullptr, false); 
                    for (auto expr : $1->get_expressions()) {
                        $$->add_value(new compiler::Item_literal_array_init(yyget_lineno(), expr, true));
                    }
                    $$->add_value($3);
                    delete $1;
                  }
                  ;

BLOCK: LBRACE RBRACE                    { $$ = new compiler::Item_block(yyget_lineno()); }
     | LBRACE BlockItems RBRACE         { $$ = $2; }
     ;

BlockItems: BlockItem                   { $$ = new compiler::Item_block(yyget_lineno()); $$->add_item($1); }
          | BlockItems BlockItem        { $$ = $1; $$->add_item($2); }
          ;

BlockItem: Decl                         { $$ = $<item_stmt>1; }
         | Stmt                         { $$ = $<item_stmt>1; }
         ;

Stmt: BLOCK                             { $$ = $<item_stmt>1; }
    | WhileStmt
    | ForStmt
    | eIfStmt
    | ReturnStmt
    | BreakStmt
    | ContinueStmt
    | AssignStmt
    | ExpStmt        
    ;

BreakStmt: BREAK SEMICOLON  { $$ = new compiler::Item_stmt_break(yyget_lineno()); }
         ;

ContinueStmt: CONTINUE SEMICOLON  { $$ = new compiler::Item_stmt_continue(yyget_lineno()); }
            ;

ReturnStmt: RETURN SEMICOLON            { $$ = new compiler::Item_stmt_return(yyget_lineno(), nullptr); }
          | RETURN Exp SEMICOLON        { $$ = new compiler::Item_stmt_return(yyget_lineno(), $2); }
          ;

eIfStmt: IF LPARENTHESIS Exp RPARENTHESIS Stmt      
{
    compiler::Item_expr_cond* const condition = new compiler::Item_expr_cond(yyget_lineno(), $3);
    $$ = new compiler::Item_stmt_eif(yyget_lineno(), condition, $5, new compiler::Item_stmt_void(yyget_lineno())); 
}
       | IF LPARENTHESIS Exp RPARENTHESIS Stmt ELSE Stmt       
{ compiler::Item_expr_cond* const condition = new compiler::Item_expr_cond(yyget_lineno(), $3);
  $$ = new compiler::Item_stmt_eif(yyget_lineno(), condition, $5, $7); 
}
       ;

ExpStmt: Exp SEMICOLON      { $$ = new compiler::Item_stmt_eval(yyget_lineno(), $1); }
       | SEMICOLON          { $$ = new compiler::Item_stmt_void(yyget_lineno()); }
       ;

WhileStmt:  WHILE LPARENTHESIS Exp RPARENTHESIS Stmt                    
{
    compiler::Item_expr_cond* const condition = new compiler::Item_expr_cond(yyget_lineno(), $3);
    $$ = new compiler::Item_stmt_while(yyget_lineno(), condition, $5); 
}
         |  DO BLOCK WHILE LPARENTHESIS Exp RPARENTHESIS SEMICOLON      
{   compiler::Item_expr_cond* const condition = new compiler::Item_expr_cond(yyget_lineno(), $5);
    $$ = new compiler::Item_stmt_while(yyget_lineno(), condition, $2, true); 
}
         ;

ForStmt: FOR LPARENTHESIS ExpStmt ExpStmt RPARENTHESIS BLOCK
         {
             compiler::Item_block* const block = new compiler::Item_block(yyget_lineno());
             block->add_item($3);
             compiler::Item_expr_cond* const condition = new compiler::Item_expr_cond(yyget_lineno(), static_cast<compiler::Item_expr*>($4));
             compiler::Item_stmt_while* const while_stmt = new compiler::Item_stmt_while(yyget_lineno(), condition, $6);
             block->add_item(while_stmt);
             $$ = block;
         }
       | FOR LPARENTHESIS ExpStmt ExpStmt Exp RPARENTHESIS BLOCK
       {
           compiler::Item_block* const block = new compiler::Item_block(yyget_lineno());
           block->add_item($3);
           $7->add_item(static_cast<compiler::Item_stmt*>($5));
           compiler::Item_expr_cond* const condition = new compiler::Item_expr_cond(yyget_lineno(), static_cast<compiler::Item_expr*>($4));
           compiler::Item_stmt_while* const while_stmt = new compiler::Item_stmt_while(yyget_lineno(),condition, $7);
           block->add_item(while_stmt);
           $$ = block;
       }
       | FOR LPARENTHESIS Decl ExpStmt RPARENTHESIS BLOCK
       {
           compiler::Item_block* const block = new compiler::Item_block(yyget_lineno());
           block->add_item($3);
            compiler::Item_expr_cond* const condition = new compiler::Item_expr_cond(yyget_lineno(), static_cast<compiler::Item_expr*>($4));
           compiler::Item_stmt_while* const while_stmt = new compiler::Item_stmt_while(yyget_lineno(), condition, $6);
           block->add_item(while_stmt);
           $$ = block;
       }
       | FOR LPARENTHESIS Decl ExpStmt Exp RPARENTHESIS BLOCK
       {
           compiler::Item_block* const block = new compiler::Item_block(yyget_lineno());
           block->add_item($3);
           $7->add_item(static_cast<compiler::Item_stmt*>($5));
        compiler::Item_expr_cond* const condition = new compiler::Item_expr_cond(yyget_lineno(), static_cast<compiler::Item_expr*>($4));
           compiler::Item_stmt_while* const while_stmt = new compiler::Item_stmt_while(yyget_lineno(),condition, $7);
           block->add_item(while_stmt);
           $$ = block;
       }
       ;

AssignStmt: Assignment SEMICOLON    { $$ = $1; }
          ;

Assignment: LVal ASSIGN Exp           { $$ = new compiler::Item_stmt_assign(yyget_lineno(), $1, $3); }
          | LVal INC                  {
                                            compiler::Item_expr_binary* const expr = 
                                                new compiler::Item_expr_binary(
                                                    yyget_lineno(),
                                                    compiler::binary_type::ADD_TYPE,
                                                    $1,
                                                    new compiler::Item_literal_int(yyget_lineno(), 1));
                                            $$ = new compiler::Item_stmt_assign(yyget_lineno(), $1, expr);
                                      }
          | LVal DEC                  {
                                            compiler::Item_expr_binary* const expr = 
                                                new compiler::Item_expr_binary(
                                                    yyget_lineno(),
                                                    compiler::binary_type::SUB_TYPE,
                                                    $1,
                                                    new compiler::Item_literal_int(yyget_lineno(), 1));
                                            $$ = new compiler::Item_stmt_assign(yyget_lineno(), $1, expr);
                                      }
          | INC LVal                  { $$ = new compiler::Item_stmt_postfix(yyget_lineno(), $2, compiler::binary_type::ADD_TYPE); }
          | DEC LVal                  { $$ = new compiler::Item_stmt_postfix(yyget_lineno(), $2, compiler::binary_type::SUB_TYPE); }
          ;

LVal: Ident
    | ArrayItem                       { $$ = $<item_ident>1; }
    ;

ArrayItem: LVal LSQUARE Exp RSQUARE             { $$ = new compiler::Item_ident_array(yyget_lineno(), $1->get_name()); $$->add_shape($3);}
         | ArrayItem LSQUARE Exp RSQUARE        { $$ = $1; $$->add_shape($3); }
         ;

Exp: LOrExp
   | CommaExp                                   { $$ = $<item_expr>1; }
   ;

CommaExp: LOrExp COMMA LOrExp                   { $$ = new compiler::Item_expr_comma(yyget_lineno()); $$->add_expression($1); $$->add_expression($3); }
        | CommaExp COMMA LOrExp                 { $$ = $1; $$->add_expression($3); }
        ;

LOrExp: LAndExp LOGIC_OR LAndExp    { $$ = new compiler::Item_expr_binary(yyget_lineno(), compiler::binary_type::LOR_TYPE, $1, $3); }
      | LOrExp LOGIC_OR LAndExp     { $$ = new compiler::Item_expr_binary(yyget_lineno(), compiler::binary_type::LOR_TYPE, $1, $3); }
      | LAndExp                    
      ;

LAndExp: LAndExp LOGIC_AND BitExp    { $$ = new compiler::Item_expr_binary(yyget_lineno(), compiler::binary_type::LAND_TYPE, $1, $3); }
       | BitExp
       ;

EqExp: RelExp EQUAL RelExp             { $$ = new compiler::Item_expr_binary(yyget_lineno(), compiler::binary_type::EQ_TYPE, $1, $3); }
     | RelExp NEQ RelExp            { $$ = new compiler::Item_expr_binary(yyget_lineno(), compiler::binary_type::NEQ_TYPE, $1, $3); }
     | RelExp
     ;

RelExp: RelExp GEQ RelExp         { $$ = new compiler::Item_expr_binary(yyget_lineno(), compiler::binary_type::GE_TYPE, $1, $3); }
      | RelExp LEQ RelExp         { $$ = new compiler::Item_expr_binary(yyget_lineno(), compiler::binary_type::LE_TYPE, $1, $3); }
      | RelExp GT RelExp           { $$ = new compiler::Item_expr_binary(yyget_lineno(), compiler::binary_type::G_TYPE, $1, $3); }
      | RelExp LTT RelExp           { $$ = new compiler::Item_expr_binary(yyget_lineno(), compiler::binary_type::L_TYPE, $1, $3); }
      | AddExp
      ;


BitExp: BitOrExp
      ;

BitOrExp: BitXorExp BIT_OR BitXorExp        { $$ = new compiler::Item_expr_binary(yyget_lineno(), compiler::binary_type::BITOR_TYPE, $1, $3); }
        | BitOrExp  BIT_OR BitXorExp        { $$ = new compiler::Item_expr_binary(yyget_lineno(), compiler::binary_type::BITOR_TYPE, $1, $3); }
        | BitXorExp
        ;

BitXorExp: BitAndExp BIT_XOR BitAndExp        { $$ = new compiler::Item_expr_binary(yyget_lineno(), compiler::binary_type::BITXOR_TYPE, $1, $3); }
        | BitXorExp  BIT_XOR BitAndExp        { $$ = new compiler::Item_expr_binary(yyget_lineno(), compiler::binary_type::BITXOR_TYPE, $1, $3); }
        | BitAndExp
        ;

BitAndExp: EqExp BIT_AND EqExp               { $$ = new compiler::Item_expr_binary(yyget_lineno(), compiler::binary_type::BITAND_TYPE, $1, $3); }
         | BitAndExp BIT_AND EqExp           { $$ = new compiler::Item_expr_binary(yyget_lineno(), compiler::binary_type::BITAND_TYPE, $1, $3); }
         | EqExp
         ;

AddExp: AddExp ADD MulExp                     { $$ = new compiler::Item_expr_binary(yyget_lineno(), compiler::binary_type::ADD_TYPE, $1, $3); }
      | AddExp MINUS MulExp                   { $$ = new compiler::Item_expr_binary(yyget_lineno(), compiler::binary_type::SUB_TYPE, $1, $3); }
      | MulExp
      ;

MulExp: MulExp MUL UnaryExp                   { $$ = new compiler::Item_expr_binary(yyget_lineno(), compiler::binary_type::MUL_TYPE, $1, $3); }
      | MulExp DIV UnaryExp                   { $$ = new compiler::Item_expr_binary(yyget_lineno(), compiler::binary_type::DIV_TYPE, $1, $3); }
      | MulExp MOD UnaryExp                   { $$ = new compiler::Item_expr_binary(yyget_lineno(), compiler::binary_type::MOD_TYPE, $1, $3); }
      | UnaryExp
      ;

UnaryExp: ADD UnaryExp                        { $$ = new compiler::Item_expr_unary(yyget_lineno(), compiler::unary_type::UADD_TYPE, $2); }
        | MINUS UnaryExp                      { $$ = new compiler::Item_expr_unary(yyget_lineno(), compiler::unary_type::UMINUS_TYPE, $2); }
        | LOGIC_NOT UnaryExp                  { $$ = new compiler::Item_expr_unary(yyget_lineno(), compiler::unary_type::LNOT_TYPE, $2); }
        | BIT_NEG UnaryExp                    { $$ = new compiler::Item_expr_unary(yyget_lineno(), compiler::unary_type::BITNEG_TYPE, $2); }
        | BIT_AND UnaryExp                    { $$ = new compiler::Item_expr_unary(yyget_lineno(), compiler::unary_type::UREF_TYPE, $2); }
        | MUL UnaryExp                        { $$ = new compiler::Item_expr_unary(yyget_lineno(), compiler::unary_type::UDEREFER_TYPE, $2); }
        | FunctionCall
        | PrimaryExp
        ;

PrimaryExp: LPARENTHESIS Exp RPARENTHESIS           { $$ = $2; }
          | LVal                                    { $$ = $<item_expr>1; }
          | LITERAL                                 { $$ = $<item_expr>1; }
          | Assignment                              { $$ = $<item_expr>1; }
          ;

LITERAL: HEX                                        { $$ = new compiler::Item_literal_int(yyget_lineno(), std::stol(*$1)); }
      | OCTAL                                       { $$ = new compiler::Item_literal_int(yyget_lineno(), std::stol(*$1)); }
      | DECIMAL                                     
        { 
          if (($1)->find(".") != std::string::npos) {
            $$ = new compiler::Item_literal_real(yyget_lineno(), std::stod(*$1)); 
          } else {
            $$ = new compiler::Item_literal_int(yyget_lineno(), std::stol(*$1)); 
          }
          
        }
      | CHAR                                        { $$ = new compiler::Item_literal_char(yyget_lineno(), $1); }
      | STRING                                      { $$ = new compiler::Item_literal_string(yyget_lineno(), *$1); }
      | TRUE                                        { $$ = new compiler::Item_literal_int(yyget_lineno(), 1); }
      | FALSE                                       { $$ = new compiler::Item_literal_int(yyget_lineno(), 0); }
      ;

FunctionCall: Ident LPARENTHESIS RPARENTHESIS                       { $$ = new compiler::Item_func_call(yyget_lineno(), $1, new compiler::Item_func_call_list(yyget_lineno())); }
            | Ident LPARENTHESIS FunctionRParams RPARENTHESIS       { $$ = new compiler::Item_func_call(yyget_lineno(), $1, $3); }
            ;

FunctionRParams: FunctionRParams COMMA BitExp               { $$ = $1; $1->add_arg($3); }
               | BitExp                                     { $$ = new compiler::Item_func_call_list(yyget_lineno()); $$->add_arg($1); }
               ;
%%